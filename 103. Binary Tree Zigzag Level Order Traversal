/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> mainList = new ArrayList<>();
        if(root == null) return mainList;
         Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        boolean leftToRight = false;

        while (!q.isEmpty()) {
            int qSize = q.size();
            List<Integer> list = new LinkedList<>();
            
            for (int i = 0; i < qSize; i++) {
                TreeNode curr = q.remove();
                if (leftToRight) {
                    list.addFirst(curr.val);
                } else {
                    list.addLast(curr.val);
                }

               if(curr.left != null) q.add(curr.left);
               if(curr.right != null) q.add(curr.right);
            }
            mainList.add(list);
            leftToRight = !leftToRight;
        }
        return mainList;
    }

    public void traversal(TreeNode root, List<List<Integer>> mainList) {
       
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 // this solution is traversing the whole tree which takes O(N), and then also calculating the height by traversing again, which is again O(N), hence TC = O(N^2)
// class Solution {
//     public int maxi = 0;
//     public int diameterOfBinaryTree(TreeNode root) {
//        findDiameter(root);
//        return maxi;
//     }

//     public void findDiameter(TreeNode root){
//         if(root == null) return;
//         int left = height(root.left);
//         int right = height(root.right);
//         maxi = Math.max(maxi, left+right);

//         findDiameter(root.left);
//         findDiameter(root.right);
//     }

//     public int height(TreeNode root){
//         if(root == null) return 0;

//         int left = height(root.left);
//         int right = height(root.right);

//         return Math.max(left, right)+1;
//     }
// }


//this will calculate the diameter as well as calculate height at the same time

class Solution {
    int maxi = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        findDiameter(root);
        return maxi;
    }

    public int findDiameter(TreeNode root){
        if(root == null) return 0;

        int left = findDiameter(root.left);
        int right = findDiameter(root.right);

        maxi = Math.max(maxi, left+right);
        return Math.max(left, right)+1;
    }
}
